@using Microsoft.Extensions.Localization
@using Microsoft.AspNetCore.Components.Web
@using HabitKitClone.Resources
@inject IJSRuntime JSRuntime
@inject IStringLocalizer<SharedResource> Localizer

<div class="contribution-chart" role="img" aria-label="Habit contribution chart for the past year" style="@ChartStyle">
    <div class="chart-wrapper">
        <div class="chart-container" @ref="chartContainer">
            <div class="chart-grid">
                @{
                    var weeks = Data.GroupBy(d => GetWeekOfYear(d.Date)).OrderBy(g => g.Key).ToList();
                }
                
                @for (int day = 0; day < 7; day++)
                {
                    var dayName = GetDayName(day);
                    <div class="chart-row">
                        <div class="day-label">@Localizer[dayName]</div>
                        <div class="day-cells">
                            @for (int week = 0; week < 52; week++)
                            {
                                var weekData = weeks.FirstOrDefault(w => w.Key == week)?.ToList() ?? new List<ContributionDay>();
                                var dayData = weekData.FirstOrDefault(d => (int)d.Date.DayOfWeek == day);
                                var count = dayData?.Count ?? 0;
                                var isFuture = IsFutureDate(dayData?.Date);
                                
                                @if (!isFuture)
                                {
                                    <div class="chart-cell level-@GetLevelForCount(count)"
                                         title="@(dayData != null ? $"{dayData.Date:MMM dd, yyyy} - {count} completion{(count != 1 ? "s" : "")}" : "")"
                                         role="button"
                                         tabindex="0"
                                         @onclick="() => OnCellClick.InvokeAsync(dayData)"
                                         @onkeypress="@(async (e) => { if (e.Key == "Enter" || e.Key == " ") { await OnCellClick.InvokeAsync(dayData); } })">
                                    </div>
                                }
                                else
                                {
                                    break;
                                }
                            }
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public List<ContributionDay> Data { get; set; } = new();
    [Parameter] public string Color { get; set; } = "#238636";
    [Parameter] public int HabitId { get; set; }
    [Parameter] public EventCallback<ContributionDay?> OnCellClick { get; set; }

    private ElementReference chartContainer;
    private string ChartStyle { get; set; } = "";
    
    protected override void OnParametersSet()
    {
        var style = new System.Text.StringBuilder();
        style.Append($"--chart-habit-color-level-0: var(--chart-future-color);");
        style.Append($"--chart-habit-color-level-1: {HexToRgba(Color, 0.4)};");
        style.Append($"--chart-habit-color-level-2: {HexToRgba(Color, 0.6)};");
        style.Append($"--chart-habit-color-level-3: {HexToRgba(Color, 0.8)};");
        style.Append($"--chart-habit-color-level-4: {HexToRgba(Color, 1.0)};");
        ChartStyle = style.ToString();
        base.OnParametersSet();
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ScrollToCurrentDay();
        }
    }

    private async Task ScrollToCurrentDay()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("scrollChartToEnd", chartContainer);
        }
        catch
        {
            // Ignore JS errors - chart will still work without auto-scroll
        }
    }
    
    private string HexToRgba(string hex, double opacity)
    {
        if (string.IsNullOrEmpty(hex) || !hex.StartsWith("#"))
        {
            hex = "#238636"; // Default color
        }
    
        hex = hex.Length == 7 ? hex.Substring(1) : hex;
    
        if (hex.Length != 6)
        {
            return $"rgba(35, 134, 54, {opacity.ToString(System.Globalization.CultureInfo.InvariantCulture)})";
        }
    
        try 
        {
            var r = Convert.ToByte(hex.Substring(0, 2), 16);
            var g = Convert.ToByte(hex.Substring(2, 2), 16);
            var b = Convert.ToByte(hex.Substring(4, 2), 16);
            return $"rgba({r}, {g}, {b}, {opacity.ToString(System.Globalization.CultureInfo.InvariantCulture)})";
        }
        catch (Exception)
        {
            return $"rgba(35, 134, 54, {opacity.ToString(System.Globalization.CultureInfo.InvariantCulture)})";
        }
    }

    private string GetDayName(int dayOfWeek)
    {
        return dayOfWeek switch
        {
            0 => "Sun",
            1 => "Mon", 
            2 => "Tue",
            3 => "Wed",
            4 => "Thu",
            5 => "Fri",
            6 => "Sat",
            _ => "Sun"
        };
    }

    private int GetWeekOfYear(DateTime date)
    {
        var calendar = System.Globalization.CultureInfo.CurrentCulture.Calendar;
        return calendar.GetWeekOfYear(date, System.Globalization.CalendarWeekRule.FirstDay, DayOfWeek.Sunday);
    }

    private int GetLevelForCount(int count)
    {
        return count switch
        {
            0 => 0,
            1 => 1,
            <= 3 => 2,
            <= 5 => 3,
            _ => 4,
        };
    }

    private bool IsFutureDate(DateTime? date)
    {
        if (!date.HasValue) return false;
        return date.Value.Date > DateTime.Today;
    }
}