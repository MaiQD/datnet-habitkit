@using Microsoft.Extensions.Localization
@using Microsoft.AspNetCore.Components.Web
@using HabitKitClone.Resources
@using HabitKitClone.Utilities
@inject IJSRuntime JSRuntime
@inject IStringLocalizer<SharedResource> Localizer

<div class="contribution-chart" role="img" aria-label="Habit contribution chart for the past year" style="@ChartStyle">
    <div class="chart-wrapper">
        <div class="chart-container" @ref="chartContainer">
            <div class="chart-grid">
                @{
                    var weeks = Data.GroupBy(d => GetWeekOfYear(d.Date)).OrderBy(g => g.Key).ToList();
                    var maxWeekNumber = GetMaxWeekNumberToShow();
                    var weekNumbers = weeks.Where(w => w.Key <= maxWeekNumber).Select(w => w.Key).ToList();
                }
                
                @for (int day = 0; day < 7; day++)
                {
                    var dayName = GetDayName(day);
                    <div class="chart-row">
                        <div class="day-label">@Localizer[dayName]</div>
                        <div class="day-cells">
                            @foreach (var weekNumber in weekNumbers)
                            {
                                var weekData = weeks.FirstOrDefault(w => w.Key == weekNumber)?.ToList() ?? new List<ContributionDay>();
                                var dayData = weekData.FirstOrDefault(d => (int)d.Date.DayOfWeek == day);
                                var count = dayData?.Count ?? 0;
                                
                                <div class="chart-cell level-@GetLevelForCount(count)"
                                     style="@GetCellStyle(count)"
                                     title="@(dayData != null ? $"{dayData.Date:MMM dd, yyyy} - {count} completion{(count != 1 ? "s" : "")}" : "")"
                                     role="button"
                                     tabindex="0"
                                     @onclick="() => OnCellClick.InvokeAsync(dayData)"
                                     @onkeypress="@(async (e) => { if (e.Key == "Enter" || e.Key == " ") { await OnCellClick.InvokeAsync(dayData); } })">
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public List<ContributionDay> Data { get; set; } = new();
    [Parameter] public string Color { get; set; } = "#238636";
    [Parameter] public int HabitId { get; set; }
    [Parameter] public EventCallback<ContributionDay?> OnCellClick { get; set; }

    private ElementReference chartContainer;
    private string ChartStyle { get; set; } = "";
    
    protected override void OnParametersSet()
    {
        // No longer using CSS variables, using inline styles instead
        ChartStyle = "";
        base.OnParametersSet();
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ScrollToCurrentDay();
        }
    }

    private async Task ScrollToCurrentDay()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("scrollChartToEnd", chartContainer);
        }
        catch
        {
            // Ignore JS errors - chart will still work without auto-scroll
        }
    }
    

    private string GetDayName(int dayOfWeek)
    {
        return dayOfWeek switch
        {
            0 => "Sun",
            1 => "Mon", 
            2 => "Tue",
            3 => "Wed",
            4 => "Thu",
            5 => "Fri",
            6 => "Sat",
            _ => "Sun"
        };
    }

    private int GetWeekOfYear(DateTime date)
    {
        var calendar = System.Globalization.CultureInfo.CurrentCulture.Calendar;
        return calendar.GetWeekOfYear(date, System.Globalization.CalendarWeekRule.FirstDay, DayOfWeek.Sunday);
    }

    private int GetLevelForCount(int count)
    {
        return count switch
        {
            0 => 0,
            1 => 1,
            <= 3 => 2,
            <= 5 => 3,
            _ => 4,
        };
    }

    private bool IsFutureDate(DateTime? date)
    {
        if (!date.HasValue) return false;
        return date.Value.Date > DateTime.Today;
    }

    private int GetMaxWeekNumberToShow()
    {
        var today = DateTime.Today;
        return GetWeekOfYear(today);
    }

    private string GetCellStyle(int count)
    {
        var level = GetLevelForCount(count);
        var opacity = level switch
        {
            0 => 0.0,
            1 => 0.4,
            2 => 0.6,
            3 => 0.8,
            4 => 1.0,
            _ => 0.0
        };
        
        if (level == 0)
        {
            return "background-color: var(--chart-future-color) !important;";
        }
        
        var color = ColorUtils.HexToRgba(Color, opacity);
        return $"background-color: {color} !important;";
    }
}