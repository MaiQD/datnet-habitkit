@page "/calendar"
@using HabitKitClone.Services
@using HabitKitClone.DTOs
@using HabitKitClone.Resources
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.Extensions.Localization
@inject IHabitService HabitService
@inject IStringLocalizer<SharedResource> Localizer
@attribute [Authorize]

<PageTitle>@Localizer["Calendar"]</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1 class="h3 mb-0">@Localizer["Calendar"]</h1>
                <div class="btn-group" role="group">
                    <button class="btn btn-outline-secondary" @onclick="() => ChangeMonth(-1)">
                        <i class="fas fa-chevron-left"></i>
                    </button>
                    <button class="btn btn-outline-secondary" @onclick="() => ChangeMonth(0)">
                        @currentMonth.ToString("MMMM yyyy")
                    </button>
                    <button class="btn btn-outline-secondary" @onclick="() => ChangeMonth(1)">
                        <i class="fas fa-chevron-right"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    @if (habits == null || !habits.Any())
                    {
                        <div class="text-center py-5">
                            <div class="mb-4">
                                <i class="fas fa-calendar-alt fa-4x text-muted"></i>
                            </div>
                            <h3 class="text-muted">@Localizer["NoHabitsYet"]</h3>
                            <p class="text-muted">@Localizer["CreateFirstHabit"]</p>
                        </div>
                    }
                    else
                    {
                        <div class="table-responsive">
                            <table class="table table-bordered calendar-table">
                                <thead>
                                    <tr>
                                        <th class="text-center">@Localizer["Sun"]</th>
                                        <th class="text-center">@Localizer["Mon"]</th>
                                        <th class="text-center">@Localizer["Tue"]</th>
                                        <th class="text-center">@Localizer["Wed"]</th>
                                        <th class="text-center">@Localizer["Thu"]</th>
                                        <th class="text-center">@Localizer["Fri"]</th>
                                        <th class="text-center">@Localizer["Sat"]</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var week in calendarWeeks)
                                    {
                                        <tr>
                                            @foreach (var day in week)
                                            {
                                                <td class="calendar-day @(day.IsCurrentMonth ? "" : "other-month") @(day.IsToday ? "today" : "") @(day.IsSelected ? "selected" : "")" 
                                                    @onclick="() => SelectDay(day.Date)">
                                                    <div class="day-number">@day.Date.Day</div>
                                                    <div class="habit-indicators">
                                                        @foreach (var habit in day.Habits)
                                                        {
                                                            <div class="habit-indicator" 
                                                                 style="background-color: @habit.Color;"
                                                                 title="@habit.Name">
                                                                @habit.Icon
                                                            </div>
                                                        }
                                                    </div>
                                                </td>
                                            }
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                        @if (selectedDay != null)
                        {
                            <div class="mt-4">
                                <h5>@selectedDay.Value.ToString("MMMM dd, yyyy")</h5>
                                <div class="row">
                                    @foreach (var habit in habits)
                                    {
                                        <div class="col-md-6 col-lg-4 mb-3">
                                            <div class="card border-light">
                                                <div class="card-body p-3">
                                                    <div class="d-flex justify-content-between align-items-center">
                                                        <div class="d-flex align-items-center">
                                                            <span class="habit-icon me-2">@habit.Icon</span>
                                                            <span class="fw-medium">@habit.Name</span>
                                                        </div>
                                                        <button class="btn btn-sm btn-outline-primary"
                                                                @onclick="() => ToggleHabitCompletion(habit.Id, selectedDay.Value)">
                                                            <i class="fas fa-check"></i>
                                                        </button>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<HabitDto>? habits;
    private DateTime currentMonth = DateTime.Today;
    private DateOnly? selectedDay = null;
    private List<List<CalendarDay>> calendarWeeks = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadHabits();
        GenerateCalendar();
    }

    private async Task LoadHabits()
    {
        var userId = GetCurrentUserId();
        habits = (await HabitService.GetUserHabitsAsync(userId)).ToList();
    }

    private void GenerateCalendar()
    {
        calendarWeeks.Clear();
        
        var firstDayOfMonth = new DateTime(currentMonth.Year, currentMonth.Month, 1);
        var lastDayOfMonth = firstDayOfMonth.AddMonths(1).AddDays(-1);
        
        // Start from Sunday of the week containing the first day of the month
        var startDate = firstDayOfMonth.AddDays(-(int)firstDayOfMonth.DayOfWeek);
        
        var currentDate = startDate;
        var week = new List<CalendarDay>();
        
        while (currentDate <= lastDayOfMonth.AddDays(6 - (int)lastDayOfMonth.DayOfWeek))
        {
            var day = new CalendarDay
            {
                Date = DateOnly.FromDateTime(currentDate),
                IsCurrentMonth = currentDate.Month == currentMonth.Month,
                IsToday = currentDate.Date == DateTime.Today,
                IsSelected = selectedDay == DateOnly.FromDateTime(currentDate),
                Habits = GetHabitsForDay(DateOnly.FromDateTime(currentDate))
            };
            
            week.Add(day);
            
            if (week.Count == 7)
            {
                calendarWeeks.Add(week);
                week = new List<CalendarDay>();
            }
            
            currentDate = currentDate.AddDays(1);
        }
    }

    private List<HabitDto> GetHabitsForDay(DateOnly date)
    {
        if (habits == null) return new List<HabitDto>();
        
        // For now, return all habits - in a real implementation, you'd check completion status
        return habits.ToList();
    }

    private async Task ChangeMonth(int direction)
    {
        if (direction == 0)
        {
            currentMonth = DateTime.Today;
        }
        else
        {
            currentMonth = currentMonth.AddMonths(direction);
        }
        
        selectedDay = null;
        GenerateCalendar();
        StateHasChanged();
    }

    private void SelectDay(DateOnly date)
    {
        selectedDay = date;
        GenerateCalendar();
        StateHasChanged();
    }

    private async Task<HabitCompletionDto?> GetHabitCompletionForDay(int habitId, DateOnly date)
    {
        var userId = GetCurrentUserId();
        return await HabitService.GetHabitCompletionAsync(habitId, date, userId);
    }

    private async Task ToggleHabitCompletion(int habitId, DateOnly date)
    {
        var userId = GetCurrentUserId();
        await HabitService.ToggleHabitCompletionAsync(habitId, date, userId);
        StateHasChanged();
    }

    private string GetCurrentUserId()
    {
        // TODO: Get current user ID from authentication context
        return "temp-user-id";
    }

    public class CalendarDay
    {
        public DateOnly Date { get; set; }
        public bool IsCurrentMonth { get; set; }
        public bool IsToday { get; set; }
        public bool IsSelected { get; set; }
        public List<HabitDto> Habits { get; set; } = new();
    }
}
