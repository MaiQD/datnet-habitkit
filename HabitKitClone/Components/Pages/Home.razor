@page "/home"
@using HabitKitClone.Services
@using HabitKitClone.DTOs
@using HabitKitClone.Resources
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.Extensions.Localization
@using System.Globalization
@inject IHabitService HabitService
@inject UserContextService UserContext
@inject IStringLocalizer<SharedResource> Localizer
@inject NavigationManager NavigationManager
@attribute [Authorize]

<PageTitle>HabitKit</PageTitle>

<div class="page-container">
    <!-- Header -->
    <header class="app-header">
        <div class="header-left">
            <button class="icon-button" aria-label="Settings" @onclick="NavigateToSettings">
                <i class="fas fa-cog"></i>
            </button>
        </div>
        <div class="header-center">
            <h1 class="app-title">HabitKit</h1>
            <span class="pro-badge">PRO</span>
        </div>
        <div class="header-right">
            <button class="icon-button add-button" aria-label="Add Habit" @onclick="ShowAddHabitModal">
                <i class="fas fa-plus"></i>
            </button>
        </div>
    </header>

    <!-- Category Filters -->
    <section class="category-filters" role="tablist" aria-label="Habit categories">
        <button class="category-filter @(SelectedCategory == "all" ? "active" : "")" 
                role="tab" 
                aria-selected="@(SelectedCategory == "all")" 
                @onclick="SelectAllCategory">
            All
        </button>
        <button class="category-filter @(SelectedCategory == "study" ? "active" : "")" 
                role="tab" 
                aria-selected="@(SelectedCategory == "study")" 
                @onclick="SelectStudyCategory">
            Study
        </button>
        <button class="category-filter @(SelectedCategory == "health" ? "active" : "")" 
                role="tab" 
                aria-selected="@(SelectedCategory == "health")" 
                @onclick="SelectHealthCategory">
            Health
        </button>
        <button class="category-filter @(SelectedCategory == "work" ? "active" : "")" 
                role="tab" 
                aria-selected="@(SelectedCategory == "work")" 
                @onclick="SelectWorkCategory">
            Work
        </button>
    </section>

    @if (isLoading)
    {
        <div class="loading-container">
            <div class="spinner"></div>
        </div>
    }
    else if (!FilteredHabits.Any())
    {
        <div class="empty-state">
            <div class="empty-icon">📝</div>
            <h2>No habits found</h2>
            <p>@(SelectedCategory == "all" ? "Create your first habit to get started!" : $"No {SelectedCategory} habits found.")</p>
            <button class="btn-primary" @onclick="ShowAddHabitModal">
                <i class="fas fa-plus"></i> Add Habit
            </button>
        </div>
    }
    else
    {
        <!-- Habits List -->
        <main class="habits-list" role="main">
            @foreach (var habit in FilteredHabits)
            {
                <div class="habit-card">
                    <div class="habit-header">
                        <div class="habit-icon" style="background-color: @habit.Color">
                            @habit.Icon
                        </div>
                        <div class="habit-info">
                            <h3 class="habit-name">@habit.Name</h3>
                            <p class="habit-description">@habit.Description</p>
                        </div>
                        <div class="habit-actions">
                            <button class="completion-checkbox @(IsHabitCompletedToday(habit) ? "completed" : "")"
                                    aria-label="@(IsHabitCompletedToday(habit) ? "Mark as incomplete" : "Mark as complete")"
                                    @onclick="() => ToggleHabitCompletion(habit)">
                                @if (IsHabitCompletedToday(habit))
                                {
                                    <i class="fas fa-check"></i>
                                }
                            </button>
                        </div>
                    </div>
                    
                    <div class="habit-progress">
                        <div class="progress-summary">
                            <span class="streak-count">@habit.CurrentStreak day streak</span>
                        </div>
                        
                        <div class="contribution-graph">
                            <div class="graph-container">
                                <div class="contribution-calendar">
                                    @{
                                        var graphData = GetHabitGraphData(habit.Id);
                                    }
                                    @for (int week = 0; week < 53; week++)
                                    {
                                        <div class="contribution-week">
                                            @for (int day = 0; day < 7; day++)
                                            {
                                                var level = GetContributionLevel(graphData, week, day);
                                                <div class="contribution-cell level-@level"
                                                     style="background-color: @habit.Color; opacity: @GetOpacityForLevel(level)">
                                                </div>
                                            }
                                        </div>
                                    }
                                </div>
                            </div>
                            
                            <div class="graph-legend">
                                <span>Less</span>
                                <div class="legend-cells">
                                    @for (int i = 0; i < 5; i++)
                                    {
                                        <div class="legend-cell level-@i" style="background-color: @habit.Color; opacity: @GetOpacityForLevel(i)"></div>
                                    }
                                </div>
                                <span>More</span>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </main>
    }
</div>

@code {
    private List<HabitDto> habits = new();
    private bool isLoading = true;
    private string SelectedCategory = "all";
    private Dictionary<int, Dictionary<DateOnly, List<HabitCompletionDto>>> habitGraphData = new();

    private List<HabitDto> FilteredHabits => 
        SelectedCategory == "all" 
            ? habits 
            : habits.Where(h => h.Name?.ToLower().Contains(SelectedCategory.ToLower()) == true).ToList();

    protected override async Task OnInitializedAsync()
    {
        await LoadHabits();
    }

    private async Task LoadHabits()
    {
        var userId = await UserContext.GetCurrentUserIdAsync();
        if (!string.IsNullOrEmpty(userId))
        {
            habits = (await HabitService.GetUserHabitsAsync(userId)).ToList();
            await LoadHabitGraphData();
        }
        isLoading = false;
    }

    private async Task LoadHabitGraphData()
    {
        var userId = await UserContext.GetCurrentUserIdAsync();
        if (string.IsNullOrEmpty(userId)) return;

        var startDate = DateTime.Today.AddDays(-365);
        var endDate = DateTime.Today;

        foreach (var habit in habits)
        {
            var completions = await HabitService.GetHabitCompletionsForYearAsync(userId);
            habitGraphData[habit.Id] = completions;
        }
    }

    private void SelectCategory(string category)
    {
        SelectedCategory = category;
        StateHasChanged();
    }

    private void SelectAllCategory()
    {
        SelectCategory("all");
    }

    private void SelectStudyCategory()
    {
        SelectCategory("study");
    }

    private void SelectHealthCategory()
    {
        SelectCategory("health");
    }

    private void SelectWorkCategory()
    {
        SelectCategory("work");
    }

    private void NavigateToSettings()
    {
        NavigationManager.NavigateTo("/settings");
    }

    private void ShowAddHabitModal()
    {
        // TODO: Implement add habit modal
        NavigationManager.NavigateTo("/");
    }

    private async Task ToggleHabitCompletion(HabitDto habit)
    {
        var userId = await UserContext.GetCurrentUserIdAsync();
        if (string.IsNullOrEmpty(userId)) return;

        var today = DateOnly.FromDateTime(DateTime.Today);
        var isCompleted = IsHabitCompletedToday(habit);

        if (isCompleted)
        {
            // Remove today's completion
            await HabitService.ToggleHabitCompletionAsync(habit.Id, today, userId);
            habit.CurrentStreak = Math.Max(0, habit.CurrentStreak - 1);
        }
        else
        {
            // Add today's completion
            await HabitService.ToggleHabitCompletionAsync(habit.Id, today, userId);
            habit.CurrentStreak++;
        }
        
        StateHasChanged();
    }

    private bool IsHabitCompletedToday(HabitDto habit)
    {
        var today = DateOnly.FromDateTime(DateTime.Today);
        var completions = GetHabitGraphData(habit.Id);
        return completions.ContainsKey(today) && completions[today].Any();
    }

    private Dictionary<DateOnly, List<HabitCompletionDto>> GetHabitGraphData(int habitId)
    {
        return habitGraphData.ContainsKey(habitId) ? habitGraphData[habitId] : new Dictionary<DateOnly, List<HabitCompletionDto>>();
    }

    private int GetContributionLevel(Dictionary<DateOnly, List<HabitCompletionDto>> completions, int week, int day)
    {
        var targetDate = DateOnly.FromDateTime(DateTime.Today.AddDays(-(53 - week) * 7 - (6 - day)));
        
        if (!completions.ContainsKey(targetDate)) return 0;
        
        var dayCompletions = completions[targetDate];
        if (!dayCompletions.Any()) return 0;
        
        var totalCount = dayCompletions.Sum(c => c.Count);
        return totalCount switch
        {
            0 => 0,
            1 => 1,
            2 => 2,
            3 => 3,
            _ => 4
        };
    }

    private double GetOpacityForLevel(int level)
    {
        return level switch
        {
            0 => 0.1,
            1 => 0.3,
            2 => 0.5,
            3 => 0.7,
            4 => 1.0,
            _ => 0.1
        };
    }
}