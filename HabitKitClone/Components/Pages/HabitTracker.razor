@page "/"
@page "/habit-tracker"
@using HabitKitClone.Components.HabitTracker
@using Microsoft.Extensions.Localization
@using Microsoft.AspNetCore.Components.Web
@using HabitKitClone.Resources
@using HabitKitClone.Services
@inject IStringLocalizer<SharedResource> Localizer
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject IHabitService HabitService
@inject UserContextService UserContextService
@rendermode InteractiveServer

<PageTitle>HabitKit - Track Your Habits</PageTitle>

<div class="habit-tracker-container">
    <!-- Header -->
    <header class="app-header">
        <div class="header-left">
            <button class="icon-button" aria-label="Settings" @onclick="NavigateToSettings">
                <i class="fas fa-cog"></i>
            </button>
        </div>
        <div class="header-center">
            <h1 class="app-title">HabitKit</h1>
            <span class="pro-badge">PRO</span>
        </div>
        <div class="header-right">
            <button class="icon-button" aria-label="List View">
                <i class="fas fa-list"></i>
            </button>
            <button class="icon-button add-button" aria-label="Add Habit" @onclick="ShowAddHabitModal">
                <i class="fas fa-plus"></i>
            </button>
        </div>
    </header>

    <!-- Category Filters -->
    <section class="category-filters" role="tablist" aria-label="Habit categories">
        @foreach (var category in Categories)
        {
            <button class="category-filter @(SelectedCategory == category.Key ? "active" : "")"
                    role="tab"
                    aria-selected="@(SelectedCategory == category.Key ? "true" : "false")"
                    @onclick="() => SelectCategory(category.Key)">
                @category.Value
            </button>
        }
    </section>

    <!-- Habits List -->
    <main class="habits-list" role="main">
        @if (FilteredHabits.Any())
        {
            @foreach (var habit in FilteredHabits)
            {
                <HabitCard Habit="habit" 
                           OnIncrementCompletion="IncrementHabitCompletion"
                           OnDecrementCompletion="DecrementHabitCompletion"
                           OnEditHabit="EditHabit"
                           OnDeleteHabit="DeleteHabit" />
            }
        }
        else
        {
            <div class="empty-state">
                <div class="empty-icon">üìù</div>
                <h2>No habits found</h2>
                <p>@(SelectedCategory == "all" ? "Create your first habit to get started!" : $"No {SelectedCategory} habits found.")</p>
                <button class="btn-primary" @onclick="ShowAddHabitModal">
                    <i class="fas fa-plus"></i> Add Habit
                </button>
            </div>
        }
    </main>

    <!-- Global View Controls -->
    @if (FilteredHabits.Any())
    {
        <div class="global-view-controls">
            <button class="view-button @(CurrentView == "grid" ? "active" : "")" 
                    aria-label="Grid view" 
                    @onclick="SetGridView">
                <i class="fas fa-th"></i>
            </button>
            <button class="view-button @(CurrentView == "list" ? "active" : "")" 
                    aria-label="List view" 
                    @onclick="SetListView">
                <i class="fas fa-list"></i>
            </button>
            <button class="view-button @(CurrentView == "calendar" ? "active" : "")" 
                    aria-label="Calendar view" 
                    @onclick="SetCalendarView">
                <i class="fas fa-calendar"></i>
            </button>
        </div>
    }
</div>

<!-- Add/Edit Habit Modal -->
@if (ShowModal)
{
    <HabitModal Habit="EditingHabit" 
                OnSave="SaveHabit" 
                OnCancel="CancelEdit" />
}

@code {
    private string SelectedCategory = "all";
    private string CurrentView = "grid";
    private bool ShowModal = false;
    private HabitModel? EditingHabit;
    
    private readonly Dictionary<string, string> Categories = new()
    {
        { "all", "All" },
        { "study", "Study" },
        { "health", "Health" },
        { "work", "Work" }
    };

    private List<HabitModel> Habits = new();
    private List<HabitModel> FilteredHabits => 
        SelectedCategory == "all" 
            ? Habits 
            : Habits.Where(h => h.Category.Equals(SelectedCategory, StringComparison.OrdinalIgnoreCase)).ToList();

    protected override async Task OnInitializedAsync()
    {
        await LoadMockData();
    }

    private void SelectCategory(string category)
    {
        SelectedCategory = category;
        StateHasChanged();
    }

    private void SetViewMode(string viewMode)
    {
        CurrentView = viewMode;
        StateHasChanged();
    }

    private void SetGridView()
    {
        SetViewMode("grid");
    }

    private void SetListView()
    {
        SetViewMode("list");
    }

    private void SetCalendarView()
    {
        SetViewMode("calendar");
    }

    private void ShowAddHabitModal()
    {
        EditingHabit = new HabitModel();
        ShowModal = true;
    }

    private void EditHabit(HabitModel habit)
    {
        EditingHabit = habit;
        ShowModal = true;
    }

    private async Task IncrementHabitCompletion(HabitModel habit)
    {
        try
        {
            var userId = await UserContextService.GetCurrentUserIdAsync();
            var today = DateOnly.FromDateTime(DateTime.Today);
            
            var newCount = await HabitService.IncrementHabitCompletionAsync(habit.Id, today, userId);
            habit.TodayCount = newCount;
            
            // Update streak count if this is the first completion today
            if (newCount == 1)
            {
                habit.StreakCount++;
            }
            
            // Refresh contribution data
            await RefreshHabitData(habit);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error incrementing habit completion: {ex.Message}");
        }
    }

    private async Task DecrementHabitCompletion(HabitModel habit)
    {
        try
        {
            var userId = await UserContextService.GetCurrentUserIdAsync();
            var today = DateOnly.FromDateTime(DateTime.Today);
            
            var newCount = await HabitService.DecrementHabitCompletionAsync(habit.Id, today, userId);
            habit.TodayCount = newCount;
            
            // Update streak count if count goes to 0
            if (newCount == 0)
            {
                habit.StreakCount = Math.Max(0, habit.StreakCount - 1);
            }
            
            // Refresh contribution data
            await RefreshHabitData(habit);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error decrementing habit completion: {ex.Message}");
        }
    }

    private async Task RefreshHabitData(HabitModel habit)
    {
        try
        {
            var userId = await UserContextService.GetCurrentUserIdAsync();
            var completions = await HabitService.GetHabitCompletionsForYearAsync(userId);
            
            // Update contribution data for this habit
            var habitCompletions = completions.Values
                .SelectMany(list => list)
                .Where(hc => hc.HabitId == habit.Id)
                .ToList();
            
            habit.ContributionData = habitCompletions
                .Select(hc => new ContributionDay
                {
                    Date = hc.CompletionDate.ToDateTime(TimeOnly.MinValue),
                    Level = hc.Count,
                    Color = habit.Color,
                    Count = hc.Count
                })
                .ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error refreshing habit data: {ex.Message}");
        }
    }

    private void DeleteHabit(HabitModel habit)
    {
        Habits.Remove(habit);
        StateHasChanged();
    }

    private void SaveHabit(HabitModel habit)
    {
        if (Habits.Contains(habit))
        {
            // Update existing habit
            var index = Habits.IndexOf(habit);
            Habits[index] = habit;
        }
        else
        {
            // Add new habit
            habit.Id = Habits.Count + 1;
            Habits.Add(habit);
        }
        ShowModal = false;
        StateHasChanged();
    }

    private void CancelEdit()
    {
        ShowModal = false;
        EditingHabit = null;
    }

    private void NavigateToSettings()
    {
        Console.WriteLine("100");
        NavigationManager.NavigateTo("/settings");
    }

    private async Task LoadMockData()
    {
        // Simulate loading delay
        await Task.Delay(100);
        
        Habits = new List<HabitModel>
        {
            new()
            {
                Id = 1,
                Title = "Work",
                Description = "Mostly complete EH and GB works listed...",
                Category = "work",
                Icon = "üíª",
                Color = "#e74c3c",
                TodayCount = 1,
                StreakCount = 5,
                ContributionData = GenerateContributionData("#e74c3c")
            },
            new()
            {
                Id = 2,
                Title = "Exercise",
                Description = "Try to do some kind of activities a day. Li...",
                Category = "health",
                Icon = "üèÜ",
                Color = "#27ae60",
                TodayCount = 1,
                StreakCount = 3,
                ContributionData = GenerateContributionData("#27ae60")
            },
            new()
            {
                Id = 3,
                Title = "Leetcode | Tech Related",
                Description = "Learning or resolving a Leetcode proble...",
                Category = "study",
                Icon = ">_",
                Color = "#e74c3c",
                TodayCount = 1,
                StreakCount = 7,
                ContributionData = GenerateContributionData("#e74c3c")
            },
            new()
            {
                Id = 4,
                Title = "2nd Language",
                Description = "can be English, Chinese",
                Category = "study",
                Icon = "üìö",
                Color = "#f39c12",
                TodayCount = 1,
                StreakCount = 2,
                ContributionData = GenerateContributionData("#f39c12")
            }
        };
    }

    private List<ContributionDay> GenerateContributionData(string color)
    {
        var data = new List<ContributionDay>();
        var random = new Random();
        var startDate = DateTime.Today.AddDays(-365);
        
        for (int i = 0; i < 365; i++)
        {
            var date = startDate.AddDays(i);
            var level = random.Next(0, 5); // 0-4 levels
            data.Add(new ContributionDay
            {
                Date = date,
                Level = level,
                Color = color
            });
        }
        
        return data;
    }
}