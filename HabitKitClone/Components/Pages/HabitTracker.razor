@page "/"
@page "/habit-tracker"
@using HabitKitClone.Components.HabitTracker
@using Microsoft.Extensions.Localization
@using Microsoft.AspNetCore.Components.Web
@using HabitKitClone.Resources
@using Microsoft.AspNetCore.Authorization
@using HabitKitClone.Services
@using HabitKitClone.DTOs
@using HabitKitClone.Models
@inherits BasePage
@inject IStringLocalizer<SharedResource> Localizer
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject IHabitService HabitService
@inject ICategoryService CategoryService
@inject UserContextService UserContextService
@attribute [Authorize]
@rendermode InteractiveServer

<PageTitle>HabitKit - Track Your Habits</PageTitle>

<div class="habit-tracker-container">
    <!-- Header -->
    <header class="app-header">
        <div class="header-left">
            <button class="icon-button" aria-label="Settings" @onclick="NavigateToSettings">
                <i class="fas fa-cog"></i>
            </button>
        </div>
        <div class="header-center">
            <h1 class="app-title">HabitKit</h1>
            <span class="pro-badge">PRO</span>
        </div>
        <div class="header-right">
            <button class="icon-button" aria-label="List View">
                <i class="fas fa-list"></i>
            </button>
            <button class="icon-button add-button" aria-label="Add Habit" @onclick="ShowAddHabitModal">
                <i class="fas fa-plus"></i>
            </button>
        </div>
    </header>

    <!-- Category Filters -->
    <section class="category-filters" role="tablist" aria-label="Habit categories">
        <button class="category-filter @(SelectedCategory == "all" ? "active" : "")"
                role="tab"
                aria-selected="@(SelectedCategory == "all" ? "true" : "false")"
                @onclick="@(() => SelectCategory("all"))">
            All
        </button>
        @foreach (var category in Categories)
        {
            <button class="category-filter @(SelectedCategory == category.Id.ToString() ? "active" : "")"
                    role="tab"
                    aria-selected="@(SelectedCategory == category.Id.ToString() ? "true" : "false")"
                    @onclick="() => SelectCategory(category.Id.ToString())">
                @category.Name
            </button>
        }
    </section>

    <!-- Habits List -->
    <main class="habits-list" role="main">
        @if (FilteredHabits.Any())
        {
            @foreach (var habit in FilteredHabits)
            {
                <HabitCard Habit="habit" 
                           ViewMode="@CurrentView"
                           OnIncrementCompletion="IncrementHabitCompletion"
                           OnDecrementCompletion="DecrementHabitCompletion"
                           OnEditHabit="EditHabit"
                           OnDeleteHabit="DeleteHabit"
                           OnShowDetail="ShowHabitDetail" />
            }
        }
        else
        {
            <div class="empty-state">
                <div class="empty-icon">üìù</div>
                <h2>No habits found</h2>
                <p>@(SelectedCategory == "all" ? "Create your first habit to get started!" : $"No {GetSelectedCategoryName()} habits found.")</p>
                <button class="btn add-button" @onclick="ShowAddHabitModal">
                    <i class="fas fa-plus"></i> Add Habit
                </button>
            </div>
        }
    </main>

    <!-- Global View Controls -->
    @if (FilteredHabits.Any())
    {
        <div class="global-view-controls">
            <button class="view-button @(CurrentView == "grid" ? "active" : "")" 
                    aria-label="Grid view" 
                    @onclick="SetGridView">
                <i class="fas fa-th"></i>
            </button>
            <button class="view-button @(CurrentView == "list" ? "active" : "")" 
                    aria-label="List view" 
                    @onclick="SetListView">
                <i class="fas fa-list"></i>
            </button>
            <button class="view-button @(CurrentView == "calendar" ? "active" : "")" 
                    aria-label="Calendar view" 
                    @onclick="SetCalendarView">
                <i class="fas fa-calendar"></i>
            </button>
        </div>
    }
</div>

<!-- Add/Edit Habit Modal -->
@if (ShowModal)
{
    <HabitModal Habit="EditingHabit" 
                OnSave="SaveHabit" 
                OnCancel="CancelEdit"
                OnDelete="DeleteHabit" />
}

<!-- Habit Detail Modal -->
@if (ShowDetailModal)
{
    <HabitDetailModal Habit="DetailHabit" 
                      OnClose="CloseHabitDetail" />
}

@code {
    private string SelectedCategory = "all";
    private string CurrentView = "grid";
    private bool ShowModal = false;
    private bool ShowDetailModal = false;
    private HabitModel? EditingHabit;
    private HabitModel? DetailHabit;
    
    private List<CategoryDto> Categories = new();
    private List<HabitModel> Habits = new();
    private List<HabitModel> FilteredHabits => 
        SelectedCategory == "all" 
            ? Habits 
            : Habits.Where(h => h.CategoryId.ToString() == SelectedCategory).ToList();

    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
        await LoadHabits();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Call base implementation for global theme initialization
        await base.OnAfterRenderAsync(firstRender);
    }

    private void SelectCategory(string category)
    {
        SelectedCategory = category;
        StateHasChanged();
    }

    private void SetViewMode(string viewMode)
    {
        CurrentView = viewMode;
        StateHasChanged();
    }

    private void SetGridView()
    {
        SetViewMode("grid");
    }

    private void SetListView()
    {
        SetViewMode("list");
    }

    private void SetCalendarView()
    {
        SetViewMode("calendar");
    }

    private void ShowAddHabitModal()
    {
        EditingHabit = new HabitModel();
        ShowModal = true;
    }

    private void EditHabit(HabitModel habit)
    {
        EditingHabit = habit;
        ShowModal = true;
    }

    private async Task IncrementHabitCompletion(HabitModel habit)
    {
        try
        {
            var userId = await UserContextService.GetCurrentUserIdAsync();
            var today = DateOnly.FromDateTime(DateTime.Today);
            
            var newCount = await HabitService.IncrementHabitCompletionAsync(habit.Id, today, userId);
            habit.TodayCount = newCount;
            
            // Update streak count if this is the first completion today
            if (newCount == 1)
            {
                habit.StreakCount++;
            }
            
            // Refresh contribution data
            await RefreshHabitData(habit);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error incrementing habit completion: {ex.Message}");
        }
    }

    private async Task DecrementHabitCompletion(HabitModel habit)
    {
        try
        {
            var userId = await UserContextService.GetCurrentUserIdAsync();
            var today = DateOnly.FromDateTime(DateTime.Today);
            
            var newCount = await HabitService.DecrementHabitCompletionAsync(habit.Id, today, userId);
            habit.TodayCount = newCount;
            
            // Update streak count if count goes to 0
            if (newCount == 0)
            {
                habit.StreakCount = Math.Max(0, habit.StreakCount - 1);
            }
            
            // Refresh contribution data
            await RefreshHabitData(habit);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error decrementing habit completion: {ex.Message}");
        }
    }

    private async Task RefreshHabitData(HabitModel habit)
    {
        try
        {
            var userId = await UserContextService.GetCurrentUserIdAsync();
            var completions = await HabitService.GetHabitCompletionsForYearAsync(userId);
            
            // Use the same logic as BuildContributionData to ensure consistency
            habit.ContributionData = BuildContributionData(habit.Id, habit.Color, completions);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error refreshing habit data: {ex.Message}");
        }
    }

    private async Task DeleteHabit(HabitModel habit)
    {
        try
        {
            var userId = await UserContextService.GetCurrentUserIdAsync();
            await HabitService.DeleteHabitAsync(habit.Id, userId);
            await LoadHabits();
            ShowModal = false;
            EditingHabit = null;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting habit: {ex.Message}");
        }
    }

    private async Task SaveHabit(HabitModel habit)
    {
        try
        {
            var userId = await UserContextService.GetCurrentUserIdAsync();
            
            if (habit.Id > 0)
            {
                // Update existing habit
                var updateHabitDto = new UpdateHabitDto
                {
                    Name = habit.Title,
                    Description = habit.Description,
                    CategoryId = habit.CategoryId,
                    Color = habit.Color,
                    Icon = habit.Icon,
                    Frequency = HabitFrequency.Daily,
                    TargetCount = 1,
                    IsActive = true
                };
                await HabitService.UpdateHabitAsync(habit.Id, updateHabitDto, userId);
            }
            else
            {
                // Create new habit
                var createHabitDto = new CreateHabitDto
                {
                    Name = habit.Title,
                    Description = habit.Description,
                    CategoryId = habit.CategoryId,
                    Color = habit.Color,
                    Icon = habit.Icon,
                    Frequency = HabitFrequency.Daily,
                    TargetCount = 1,
                    ReminderTime = new TimeOnly(9, 0)
                };
                await HabitService.CreateHabitAsync(createHabitDto, userId);
            }
            
            // Reload habits from database
            await LoadHabits();
            ShowModal = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving habit: {ex.Message}");
        }
    }

    private void CancelEdit()
    {
        ShowModal = false;
        EditingHabit = null;
    }

    private void ShowHabitDetail(HabitModel habit)
    {
        DetailHabit = habit;
        ShowDetailModal = true;
        StateHasChanged();
    }

    private async Task CloseHabitDetail()
    {
        ShowDetailModal = false;
        DetailHabit = null;
        // Reload habits to ensure main page shows updated statistics
        await LoadHabits();
    }

    private void NavigateToSettings()
    {
        Console.WriteLine("100");
        NavigationManager.NavigateTo("/settings");
    }

    private string GetSelectedCategoryName()
    {
        if (SelectedCategory == "all") return "habits";
        var category = Categories.FirstOrDefault(c => c.Id.ToString() == SelectedCategory);
        return category?.Name.ToLower() ?? "habits";
    }

    private string MapFrequencyToCategory(HabitFrequency frequency)
    {
        // Map frequency to category or add a Category property to Habit model
        return "all"; // Default, can be enhanced later
    }

    private int CalculateStreak(int habitId, Dictionary<DateOnly, List<HabitCompletionDto>> completions)
    {
        int streak = 0;
        var today = DateOnly.FromDateTime(DateTime.Today);
        
        for (int i = 0; i < 365; i++)
        {
            var date = today.AddDays(-i);
            if (completions.TryGetValue(date, out var dayCompletions) && 
                dayCompletions.Any(c => c.HabitId == habitId && c.Count > 0))
            {
                streak++;
            }
            else
            {
                break;
            }
        }
        
        return streak;
    }

    private List<ContributionDay> BuildContributionData(int habitId, string color, 
        Dictionary<DateOnly, List<HabitCompletionDto>> completions)
    {
        var data = new List<ContributionDay>();
        var today = DateTime.Today;
        var startDate = today.AddDays(-(52 * 7 - 1)); // 52 weeks minus 1 day to get exactly 364 days
        
        for (int i = 0; i < 364; i++)
        {
            var date = startDate.AddDays(i);
            var dateOnly = DateOnly.FromDateTime(date);
            var count = 0;
            
            if (completions.TryGetValue(dateOnly, out var dayCompletions))
            {
                count = dayCompletions.FirstOrDefault(c => c.HabitId == habitId)?.Count ?? 0;
            }
            
            data.Add(new ContributionDay
            {
                Date = date,
                Level = count,
                Count = count,
                Color = color
            });
        }
        
        return data;
    }

    private async Task LoadCategories()
    {
        try
        {
            var userId = await UserContextService.GetCurrentUserIdAsync();
            // Load only categories that have habits for this user
            Categories = (await CategoryService.GetCategoriesWithHabitsAsync(userId)).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading categories: {ex.Message}");
            Categories = new List<CategoryDto>();
        }
    }

    private async Task LoadHabits()
    {
        try
        {
            var userId = await UserContextService.GetCurrentUserIdAsync();
            var habitDtos = await HabitService.GetUserHabitsAsync(userId);
            var completions = await HabitService.GetHabitCompletionsForYearAsync(userId);
            var today = DateOnly.FromDateTime(DateTime.Today);
            
            Habits = habitDtos.Select(h => new HabitModel
            {
                Id = h.Id,
                Title = h.Name,
                Description = h.Description,
                CategoryId = h.CategoryId,
                CategoryName = h.CategoryName,
                Icon = h.Icon,
                Color = h.Color,
                TodayCount = completions.TryGetValue(today, out var todayCompletions) 
                    ? todayCompletions.FirstOrDefault(c => c.HabitId == h.Id)?.Count ?? 0 
                    : 0,
                StreakCount = h.CurrentStreak,
                TotalCompletions = h.TotalCompletions,
                BestStreak = h.LongestStreak,
                CompletionRate = h.CompletionRate,
                ContributionData = BuildContributionData(h.Id, h.Color, completions)
            }).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading habits: {ex.Message}");
            Habits = new List<HabitModel>();
        }
    }
}